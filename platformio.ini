; PlatformIO Project Configuration File
; https://docs.platformio.org/page/projectconf.html

[platformio]
#extra_configs = platformio_local_libs.ini

[env]
framework = arduino
monitor_speed = 115200

extra_scripts =
    tools/extra_upload_ncp.py
    tools/extra_ota_bin.py

lib_deps =
    blynkkk/Blynk@^1.3.0
    blynkkk/BlynkNcpDriver@^0.6.2
    jandrassy/ArduinoOTA@^1.0.10
    OneButton=https://github.com/mathertel/OneButton/archive/refs/heads/master.zip

build_src_flags =
    -Wall -Wextra                       ; Additional warnings

build_flags =
    -Wswitch -Wuninitialized
    -Wunused-function
    -Wfatal-errors                      ; Fail on first error
    -Werror=return-type                 ; Fail on return type error
    -DNO_OTA_NETWORK                    ; Disable network functions in ArduinoOTA

[rp2040]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
platform_packages = framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git#3.3.0
board_build.core = earlephilhower
board_build.filesystem_size = 1M

lib_ignore =
    WiFi

[rp2040:mbed]
platform = raspberrypi

lib_ignore =
    WiFi
    ArduinoOTA

[renesas]
platform = renesas-ra@0.0.2

lib_ignore =
    WiFiC3
    WiFiS3
    ArduinoOTA

########################################################
##  Dual-MCU boards
########################################################

[env:nano33iot]
platform = atmelsam
board = nano_33_iot
custom_ncp.firmware = nina_w102
custom_ncp.upload_speed = 921600

[env:mkrwifi1010]
platform = atmelsam
board = mkrwifi1010
custom_ncp.firmware = nina_w102
custom_ncp.upload_speed = 921600

[env:rp2040connect]
extends = rp2040
board = arduino_nano_connect
board_build.filesystem_size = 8M
custom_ncp.firmware = nina_w102
custom_ncp.upload_speed = 921600
custom_ncp.before_upload = no_reset

[env:rp2040connect-mbed]
extends = rp2040:mbed
board = nanorp2040connect
custom_ncp.firmware = nina_w102
custom_ncp.upload_speed = 921600
custom_ncp.before_upload = no_reset

[env:t_pico_c3]
extends = rp2040
board = rpipico
board_upload.maximum_size = 4194304
board_build.filesystem_size = 2M
custom_ncp.flasher = direct
custom_ncp.firmware = lilygo_pico_c3
custom_ncp.upload_speed = 2000000
custom_ncp.before_upload = usb_reset
custom_ncp.pre_upload_message =
    Ensure your T-PicoC3 is connected in ESP mode (USB polarity indicator is GREEN)
custom_ncp.post_upload_message =
    Blynk.NCP firmware is now running on the ESP32-S3.
    Please switch the Type C cable polarity (the USB indicator should be BLUE) to upload the main firmware.

build_flags =
    ${env.build_flags}
    -DARDUINO_TTGO_T_PICO_C3
    #-include "include/pin_config.h"

lib_deps =
    ${env.lib_deps}
    #bodmer/TFT_eSPI@^2.5.31

[env:unoR4wifi]
extends = renesas
board = uno_r4_wifi
custom_ncp.flasher = direct
custom_ncp.firmware = uno_r4_wifi
custom_ncp.upload_speed = 2000000
custom_ncp.pre_upload_message =
    1. Disconnect the UNO R4 WiFi from your PC
    2. Short the pins highlighted in the image using a jumper wire:
       https://github.com/blynkkk/BlynkNcpExample/blob/main/docs/Images/Uno-R4-Jumper.png
    3. Connect the UNO R4 WiFi to your PC
custom_ncp.post_upload_message =
    1. Disconnect the UNO R4 WiFi from your PC
    2. Unplug the jumper wire
    3. Connect the board to your PC again

[env:portentaC33]
extends = renesas
board = portenta_c33
custom_ncp.firmware = generic_esp32c3_4M
custom_ncp.upload_speed = 460800
custom_ncp.use_stub = no

[env:pico_esp8266]
extends = rp2040
board = rpipico
custom_ncp.firmware = generic_esp8266_4M
custom_ncp.upload_speed = 460800
custom_ncp.manual_reset = yes
#custom_ncp.erase_all = no
custom_ncp.pre_upload_message =
    Switch your ESP8266 into Firware update mode:
    1. Press and hold the Boot button (on some boards it can be marked as Flash or IO0)
    2. Press Reset(RST/EN) button shortly
    3. Release the Boot button
custom_ncp.post_upload_message =
    Upload complete. Please power-cycle your device (unplug the board completely).

########################################################
##  Generic boards (require connecting a separate NCP)
########################################################

[env:uno]
platform = atmelavr
board = uno
custom_ncp.flasher = none

build_src_flags =
    ${env.build_src_flags}
    -DBLYNK_NCP_SERIAL=Serial1
    -DBLYNK_NCP_BAUD=57600
    -DBLYNK_NCP_RX=10
    -DBLYNK_NCP_TX=9
    #-DBLYNK_NCP_TYPE_WITTY_CLOUD

[env:nano]
platform = atmelavr
board = nanoatmega328new
#board = nanoatmega328
custom_ncp.flasher = none

build_src_flags =
    ${env.build_src_flags}
    -DBLYNK_NCP_SERIAL=Serial1
    -DBLYNK_NCP_BAUD=57600
    -DBLYNK_NCP_RX=10
    -DBLYNK_NCP_TX=9
    #-DBLYNK_NCP_TYPE_WITTY_CLOUD

[env:promicro8]
platform = atmelavr
board = sparkfun_promicro8
custom_ncp.flasher = none

build_src_flags =
    ${env.build_src_flags}
    -DBLYNK_NCP_SERIAL=Serial1
    -DBLYNK_NCP_BAUD=57600
    #-DBLYNK_NCP_TYPE_WITTY_CLOUD

[env:pico]
extends = rp2040
board = rpipico
custom_ncp.flasher = none

build_src_flags =
    ${env.build_src_flags}
    #-DBLYNK_NCP_SERIAL=Serial1
    -DBLYNK_NCP_BAUD=115200

[env:pico-mbed]
extends = rp2040:mbed
board = pico
custom_ncp.flasher = none

build_src_flags =
    ${env.build_src_flags}
    -DBLYNK_NCP_SERIAL=Serial1
    -DBLYNK_NCP_BAUD=115200

[env:linux]
platform = native
custom_ncp.flasher = direct
custom_ncp.firmware = generic_esp32_4M
#custom_ncp.firmware_ver = v0.5.1
custom_ncp.upload_speed = 460800

framework =

lib_deps =
    ${env.lib_deps}
    EpoxyDuino=https://github.com/bxparks/EpoxyDuino.git

lib_ignore =
    ArduinoOTA

build_src_flags =
    ${env.build_src_flags}
    #-DBLYNK_NCP_PORT='"/dev/ttyUSB0"'
    -DBLYNK_NCP_BAUD=921600
    ## Uncomment one of these to enable the status LED / user button
    #-DBLYNK_NCP_TYPE_WITTY_CLOUD
    #-DBLYNK_NCP_TYPE_TTGO_T7
    #-DBLYNK_NCP_TYPE_TTGO_T7_S3
    #-DBLYNK_NCP_TYPE_TTGO_TOI_PLUS
    #-DBLYNK_NCP_TYPE_MACCHINA_SUPERB

build_flags =
    ${env.build_flags}
    -DARDUINO=100 -DLINUX
    -lserialport

